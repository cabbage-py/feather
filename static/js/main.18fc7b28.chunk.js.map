{"version":3,"sources":["components/Header.js","components/Main.js","components/Projects.js","theme.js","global.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","padding","type","onClick","this","props","toggleTheme","Component","Main","marginBottom","mainText","introText","href","target","rel","welcomeText","buttonStyle","to","fontSize","textAlign","marginLeft","animation","fontWeight","Projects","projectHeader","temp","lightTheme","body","text","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","theme","App","state","setState","vantaEffect","setOptions","backgroundColor","vantaRef","React","createRef","BIRDS","el","current","color1","color2","colorMode","separation","quantity","destroy","ref","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18fc7b28.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-header\" style={{ padding: \"calc( 7px + (9 - 7) * (100vw - 400px)/(800-400) )\" }}>\r\n                <div>\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onClick={this.props.toggleTheme}/>\r\n                        <span className=\"slider\"></span>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nHeader.propTypes = {\r\n    toggleTheme: PropTypes.func.isRequired\r\n  };\r\n\r\nexport default Header\r\n","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-10 offset-1 col-sm-10 offset-1 col-md-6 offset-md-3\" style={{ marginBottom: \"10em\" }}>\r\n                <h1 style={mainText}>Hi.</h1>\r\n                <p style={introText}>\r\n                  I'm <a href=\"https://www.linkedin.com/in/danj/\" target=\"_blank\" rel=\"noopener noreferrer\">Dan Jiang</a>, a Software Engineering student.\r\n                </p>\r\n                <p style={welcomeText}>Welcome to my site.</p>\r\n                <br></br>\r\n                <Link className=\"button\" style={ buttonStyle } to=\"/feather/projects\"> <span>My Projects</span></Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mainText = {\r\n  fontSize: \"calc( 100px + (150 - 100) * (100vw - 400px)/(800-400) )\",\r\n  textAlign: \"left\",\r\n  marginLeft: \"-0.07em\",\r\n  animation: \"fadein1 5s\"\r\n};\r\n\r\nconst introText = {\r\n  textAlign: \"left\",\r\n  fontSize: \"calc( 15px + (20 - 15) * (100vw - 400px)/(800-400) )\",\r\n  animation: \"fadein2 5s\"\r\n};\r\n\r\nconst welcomeText = {\r\n  textAlign: \"left\",\r\n  fontSize: \"calc( 16px + (24 - 16) * (100vw - 400px)/(800-400) )\",\r\n  fontWeight: \"bold\",\r\n  animation: \"fadein3 5s\"\r\n};\r\n\r\nconst buttonStyle = {\r\n  fontSize: \"calc( 10px + (15 - 10) * (100vw - 400px)/(800-400) )\",\r\n  animation: \"fadein4 5s\",\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Projects extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-8 offset-2 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-6 offset-lg-3 col-xl-4 offset-xl-4\" style={{ marginBottom: \"10em\" }}>\r\n\r\n                <h1 style={projectHeader}>My Projects</h1>\r\n                <p style={ temp }>(this page is still a work in progress)</p>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst projectHeader = {\r\n  padding: \"1.2em 0em\",\r\n  fontSize: \"calc( 30px + (40 - 30) * (100vw - 400px)/(800-400) )\",\r\n  animation: \"fadein1 4s\"\r\n};\r\n\r\nconst temp = {\r\n  animation: \"fadein1 4s\",\r\n  fontSize: \"calc( 16px + (20 - 16) * (100vw - 400px)/(800-400) )\",\r\n}\r\n\r\nexport default Projects;\r\n","export const lightTheme = {\r\n    body: 'white',\r\n    text: 'black',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\r\n  }\r\n  \r\nexport const darkTheme = {\r\n    body: '#282c34',\r\n    text: 'white',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)',\r\n    }","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    transition: all 0.25s linear;\r\n  }\r\n\r\n  .App-header {\r\n    color: ${({ theme }) => theme.text};\r\n    transition: all 0.25s linear;\r\n  }\r\n\r\n  .vanta-canvas {\r\n    transition: all 0.25s linear;\r\n  }\r\n\r\n  .button {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  .button span:after {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  \r\n  .button:hover span {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  .btn {\r\n    flex: \"1\" ,\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  .projectHeader {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  .backBtn {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  .todoItem {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n`\r\n\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport BIRDS from 'vanta/dist/vanta.birds.min';\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Projects from \"./components/Projects\";\n\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './theme';\nimport { GlobalStyles } from './global';\n\n\nexport class App extends Component {\n  constructor() {\n    super()\n    this.vantaRef = React.createRef()\n    this.state = {\n      theme: \"light\"\n    };\n  }\n\n  componentDidMount() {\n    this.vantaEffect = BIRDS({\n      el: this.vantaRef.current,\n      color1: 0xffc3f1,\n      color2: 0xb837ff,\n      colorMode: \"lerpGradient\",\n      separation: 56.00,\n      quantity: 4.00,\n      backgroundColor: this.state.theme === 'light' ? 0xffffff : 0x90909,\n    })\n  }\n\n  componentWillUnmount() {\n    if (this.vantaEffect) this.vantaEffect.destroy()\n  }\n\n\n  // App.js\n  state = {\n    theme: \"light\"\n  };\n\n  // The function that toggles between themes\n  toggleTheme = () => {\n    // if the theme is not light, then set it to dark\n    if (this.state.theme === 'light') {\n      this.setState({ theme: \"dark\" });\n      this.vantaEffect.setOptions({backgroundColor: 0x90909});\n    // otherwise, it should be light\n    } else {\n      this.setState({ theme: \"light\" });\n      this.vantaEffect.setOptions({backgroundColor: 0xffffff});\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <ThemeProvider theme={this.state.theme === 'light' ? lightTheme : darkTheme}>\n          <GlobalStyles/>\n          <div ref={this.vantaRef} className=\"App\">\n            <Header toggleTheme={this.toggleTheme}/>\n            <Route exact path=\"/feather\" component={Main} />\n            <Route path=\"/feather/projects\" component={Projects} />\n          </div>\n        </ThemeProvider>\n    </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}